{"version":3,"sources":["Home.js","Search.js","Repo.js","serviceWorker.js","index.js","libstack-logo.jpg"],"names":["Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","query","onChange","bind","assertThisInitialized","e","preventDefault","history","push","setState","target","value","_this2","react_default","a","createElement","className","src","logo","alt","Grid","padded","Row","centered","Column","width","Form","onSubmit","Group","Input","size","name","placeholder","Button","fluid","color","type","Component","Search","search","URLSearchParams","location","Header","as","get","List","Item","react_router_dom","to","Repo","owner","match","params","repo","Boolean","window","hostname","ReactDOM","render","react_router","path","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.fb20c77f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport logo from './libstack-logo.jpg';\nimport './App.css';\nimport { Grid, Form } from 'semantic-ui-react';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: \"\"\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    this.props.history.push(\"/lib-stack/search?query=\" + this.state.query);\n  }\n\n  onChange(e) {\n    this.setState({\n      query: e.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <Grid padded>\n          <Grid.Row centered>\n            <Grid.Column width={12}>\n              <Form onSubmit={e => this.onSubmit(e)}>\n                <Form.Group>\n                  <Form.Input\n                    width={12}\n                    size=\"big\"\n                    name=\"query\"\n                    value={this.state.query}\n                    onChange={this.onChange}\n                    placeholder=\"Search...\"\n                  />\n                  <Form.Button\n                    fluid\n                    width={4}\n                    size=\"big\"\n                    color=\"orange\"\n                    type=\"submit\">\n                    Search\n                  </Form.Button>\n                </Form.Group>\n              </Form>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport {Link} from 'react-router-dom';\n\nimport logo from './libstack-logo.jpg';\nimport {List, Header} from 'semantic-ui-react';\n\nclass Search extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      search: new URLSearchParams(props.location.search)\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <Header as='h2'>Search</Header>\n        </header>\n        <Header as='h3'>Query: {this.state.search.get(\"query\")}</Header>\n        <List>\n          <List.Item><Link to=\"/lib-stack/owner1/lib1\">Lib1</Link></List.Item>\n          <List.Item><Link to=\"/lib-stack/owner2/lib2\">Lib2</Link></List.Item>\n          <List.Item><Link to=\"/lib-stack/owner3/lib3\">Lib3</Link></List.Item>\n          <List.Item><Link to=\"/lib-stack/owner4/lib4\">Lib4</Link></List.Item>\n        </List>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React, {Component} from 'react';\nimport logo from './libstack-logo.jpg';\n\nimport {Header} from 'semantic-ui-react';\n\nclass Repo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      owner: props.match.params.owner,\n      repo: props.match.params.repo\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <Header as='h2'>Repo</Header>\n        </header>\n        <Header as='h3'>{this.state.owner}</Header>\n        <Header as='h3'>{this.state.repo}</Header>\n      </div>\n    );\n  }\n}\n\nexport default Repo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Home is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport {Route} from 'react-router';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nimport Home from './Home';\nimport Search from './Search';\nimport Repo from './Repo';\n\nimport * as serviceWorker from './serviceWorker';\n\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/lib-stack\" exact component={Home} />\n      <Route path=\"/lib-stack/search\" component={Search} />\n      <Route path=\"/lib-stack/:owner/:repo\" component={Repo} />\n    </Router>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/libstack-logo.c0ac9601.jpg\";"],"sourceRoot":""}